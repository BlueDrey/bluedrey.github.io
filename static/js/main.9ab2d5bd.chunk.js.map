{"version":3,"sources":["components/Header.js","components/Card.js","containers/CommunalContainer.js","containers/TableContainer.js","components/OddsDisplay.js","helpers/pokerCalculator.js","helpers/cardData.js","App.js","index.js"],"names":["Title","Typography","Header","React","Component","render","PlayCard","src","this","props","code","alt","onClick","handleClick","class","CommunalContainer","cards","map","card","key","name","addCard","TableContainer","className","shape","size","type","selected","area","setSelected","removeCard","styles","OddsDisplay","orientation","danger","getOdds","gutter","span","style","odds1","oddsTie","odds2","makeString","join","calculateOdds","p1","p2","table","player1Cards","CardGroup","fromString","player2Cards","tableCards","result","OddsCalculator","calculate","player1","equities","getEquity","player2","tie","App","state","limit","oddsP1","oddsP2","availableCards","filter","includes","selectedCard","length","setState","alert","odds","communalCards","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9ab2d5bd.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Typography } from \"antd\";\n\nconst { Title } = Typography;\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div>\n        <Title>YANNEX POC</Title>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./Card.css\";\n\n/* This component should return an image tag that \n      displays an individual card which runs a callback\n      function (handleClick) when it is clicked on.*/\nclass PlayCard extends React.Component {\n  render() {\n    return (\n      <img\n        src={`/imgs/cards/${this.props.code}.png`}\n        alt=\"\"\n        onClick={this.props.handleClick}\n        class=\"img\"\n      />\n    );\n  }\n}\n\nexport default PlayCard;\n","import React from \"react\";\nimport PlayCard from \"../components/Card\";\nimport \"./CommunalContainer.css\";\n\n// this component recieves the available cards array and the addCard function as props\n// then renders the display of communal cards\nclass CommunalContainer extends React.Component {\n  render() {\n    return (\n      <div class=\"gallery\">\n        {this.props.cards.map(card => (\n          <PlayCard\n            key={card.name}\n            code={card.code}\n            class=\"gallery__img\"\n            // This handleClick function adds the current card to\n            // the selected area in state\n            handleClick={() => this.props.addCard(card)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CommunalContainer;\n","import React from \"react\";\nimport Card from \"../components/Card\";\nimport { Button } from \"antd\";\nimport \"antd/dist/antd.css\";\n\n// This component recieves an array of cards, a container name, an area and the selected area,\n// plus the setSelected and removeCard functions as props, and returns one\n// of the three areas which cards can be moved into\n\nclass TableContainer extends React.Component {\n  // The line below sets the button to be an active button, based on whether the current area\n  // is the selected area\n  render() {\n    // const buttonClass =\n    //   this.props.selected === this.props.area ? \"active-button\" : \"\";\n    return (\n      <div className=\"table-card-containers\">\n        {/* The button below sets the selected area to be the current area in state */}\n        <Button\n          shape=\"round\"\n          size=\"large\"\n          type={this.props.selected === this.props.area ? \"primary\" : \"\"}\n          onClick={() => this.props.setSelected(this.props.area)}\n        >{`${this.props.name} Cards`}</Button>\n        <div>\n          {this.props.cards.map(card => (\n            <Card\n              key={card.name}\n              code={card.code}\n              // The handleclick function below removes the card from\n              // the current area in state\n              handleClick={() => this.props.removeCard(card, this.props.area)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TableContainer;\n","import React from \"react\";\nimport \"./OddsDisplay.css\";\nimport { Row, Col, Card, Divider, Button } from \"antd\";\n\nconst styles = { \"font-size\": \"20px\" };\n\nclass OddsDisplay extends React.Component {\n  render() {\n    return (\n      <div className=\"odds-container\">\n        <Divider orientation=\"center\">\n          <Button\n            danger\n            type=\"primary\"\n            size=\"large\"\n            onClick={this.props.getOdds}\n          >\n            Calculate Propability of Victory\n          </Button>\n        </Divider>\n        <Row gutter={16}>\n          <Col span={8}>\n            <Card style={styles}>Player 1 Win: {this.props.odds1}%</Card>\n          </Col>\n          <Col span={8}>\n            <Card style={styles}>Split Pot: {this.props.oddsTie}%</Card>\n          </Col>\n          <Col span={8}>\n            <Card style={styles}>Player 2 Win: {this.props.odds2}%</Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default OddsDisplay;\n","import { CardGroup, OddsCalculator } from 'poker-odds-calculator';\n\nconst makeString = cards => cards.map(card => card.code).join(\"\")\n\nconst calculateOdds = (p1, p2, table) => {\n  const player1Cards = CardGroup.fromString(makeString(p1));\n  const player2Cards = CardGroup.fromString(makeString(p2));\n  const tableCards = CardGroup.fromString(makeString(table));\n\n  const result = OddsCalculator.calculate([player1Cards, player2Cards], tableCards);\n\n  const player1 = result.equities[0].getEquity()\n  const player2 = result.equities[1].getEquity()\n  const tie = 100 - player1 - player2\n\n  return { player1, player2, tie }\n}\n\nexport default calculateOdds","const cards = [\n  { name: 'Ace Diamonds', code: 'Ad' },\n  { name: '2 Diamonds', code: '2d' },\n  { name: '3 Diamonds', code: '3d' },\n  { name: '4 Diamonds', code: '4d' },\n  { name: '5 Diamonds', code: '5d' },\n  { name: '6 Diamonds', code: '6d' },\n  { name: '7 Diamonds', code: '7d' },\n  { name: '8 Diamonds', code: '8d' },\n  { name: '9 Diamonds', code: '9d' },\n  { name: '10 Diamonds', code: 'Td' },\n  { name: 'Jack Diamonds', code: 'Jd' },\n  { name: 'Queen Diamonds', code: 'Qd' },\n  { name: 'King Diamonds', code: 'Kd' },\n  { name: 'Ace Hearts', code: 'Ah' },\n  { name: '2 Hearts', code: '2h' },\n  { name: '3 Hearts', code: '3h' },\n  { name: '4 Hearts', code: '4h' },\n  { name: '5 Hearts', code: '5h' },\n  { name: '6 Hearts', code: '6h' },\n  { name: '7 Hearts', code: '7h' },\n  { name: '8 Hearts', code: '8h' },\n  { name: '9 Hearts', code: '9h' },\n  { name: '10 Hearts', code: 'Th' },\n  { name: 'Jack Hearts', code: 'Jh' },\n  { name: 'Queen Hearts', code: 'Qh' },\n  { name: 'King Hearts', code: 'Kh' },\n  { name: 'Ace Clubs', code: 'Ac' },\n  { name: '2 Clubs', code: '2c' },\n  { name: '3 Clubs', code: '3c' },\n  { name: '4 Clubs', code: '4c' },\n  { name: '5 Clubs', code: '5c' },\n  { name: '6 Clubs', code: '6c' },\n  { name: '7 Clubs', code: '7c' },\n  { name: '8 Clubs', code: '8c' },\n  { name: '9 Clubs', code: '9c' },\n  { name: '10 Clubs', code: 'Tc' },\n  { name: 'Jack Clubs', code: 'Jc' },\n  { name: 'Queen Clubs', code: 'Qc' },\n  { name: 'King Clubs', code: 'Kc' },\n  { name: 'Ace Spades', code: 'As' },\n  { name: '2 Spades', code: '2s' },\n  { name: '3 Spades', code: '3s' },\n  { name: '4 Spades', code: '4s' },\n  { name: '5 Spades', code: '5s' },\n  { name: '6 Spades', code: '6s' },\n  { name: '7 Spades', code: '7s' },\n  { name: '8 Spades', code: '8s' },\n  { name: '9 Spades', code: '9s' },\n  { name: '10 Spades', code: 'Ts' },\n  { name: 'Jack Spades', code: 'Js' },\n  { name: 'Queen Spades', code: 'Qs' },\n  { name: 'King Spades', code: 'Ks' }\n]\n\nexport default cards\n","import React, { Component } from 'react'\nimport Header from './components/Header'\nimport CommunalContainer from './containers/CommunalContainer'\nimport TableContainer from './containers/TableContainer'\nimport OddsDisplay from './components/OddsDisplay'\nimport calculateOdds from './helpers/pokerCalculator'\nimport cards from './helpers/cardData'\n\nclass App extends Component {\n  state = {\n    cards: cards,\n    // The above is an array of card objects\n    player1: [],\n    player2: [],\n    table: [],\n    // The three arrays above will contain\n    // card objects that have been selected\n    selected: 'player1',\n    // The above string shows the area we are\n    // currently adding cards to\n    limit: 2,\n    // The above number is the amount of cards we can\n    // add to the currently selected area. This should\n    // always be updated with the selected area string\n    oddsP1: null,\n    oddsP2: null,\n    oddsTie: null\n    // The above three numbers are the values we\n    // get back from the odds calculator\n  }\n\n  availableCards = () => {\n    // this function should return all of the cards which aren't currently\n    // in either a players hand or on the table\n    return this.state.cards.filter(card => {\n      return (\n        !this.state.player1.includes(card) &&\n        !this.state.player2.includes(card) &&\n        !this.state.table.includes(card)\n      )\n    })\n  }\n\n  addCard = selectedCard => {\n    // this function should take an argument of a card and add that card\n    // to the currently selected area's array in state\n    if (this.state[this.state.selected].length < this.state.limit) {\n      this.setState({\n        [this.state.selected]: [\n          ...this.state[this.state.selected],\n          selectedCard\n        ]\n      })\n    } else {\n      alert(\"You can't add any more cards to this area!\")\n    }\n  }\n\n  removeCard = (selectedCard, area) => {\n    // this function should take two arguments, an area and a card,\n    // and remove the card from that area\n    this.setState({\n      [area]: this.state[area].filter(card => card !== selectedCard)\n    })\n  }\n\n  setSelected = area =>\n    // this function should take an argument of an area and set that area as\n    // the selected area in state. This function should also update the limit\n    //  property in state depending on which area is being set as the selected\n    // area in state\n    this.setState({ selected: area, limit: area === 'table' ? 3 : 2 })\n\n  getOdds = () => {\n    // This function calculates the odds for each player once there are enough\n    // cards selected from the communal cards, then sets the odds values in state.\n    if (this.availableCards().length === this.state.cards.length - 7) {\n      let odds = calculateOdds(\n        this.state.player1,\n        this.state.player2,\n        this.state.table\n      )\n      this.setState({\n        oddsP1: odds.player1,\n        oddsP2: odds.player2,\n        oddsTie: odds.tie\n      })\n    } else {\n      alert(\"You don't have enough cards for a query yet!\")\n    }\n  }\n\n  render() {\n    const communalCards = this.availableCards()\n    // The above constant will be passed as a prop\n    // to one of our container components\n    return (\n      <div>\n        <Header />\n        <CommunalContainer cards={communalCards} addCard={this.addCard} />\n        <div className=\"table-containers\">\n          <TableContainer\n            name=\"Player 1\"\n            area=\"player1\"\n            cards={this.state.player1}\n            removeCard={this.removeCard}\n            setSelected={this.setSelected}\n            selected={this.state.selected}\n          />\n          <TableContainer\n            name=\"Table\"\n            area=\"table\"\n            cards={this.state.table}\n            removeCard={this.removeCard}\n            setSelected={this.setSelected}\n            selected={this.state.selected}\n          />\n          <TableContainer\n            name=\"Player 2\"\n            area=\"player2\"\n            cards={this.state.player2}\n            removeCard={this.removeCard}\n            setSelected={this.setSelected}\n            selected={this.state.selected}\n          />\n        </div>\n        <OddsDisplay\n          getOdds={this.getOdds}\n          odds1={this.state.oddsP1}\n          odds2={this.state.oddsP2}\n          oddsTie={this.state.oddsTie}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}